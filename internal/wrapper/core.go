package wrapper

import (
	"context"
	"fmt"
	"os"
	"os/exec"
	"strings"
	"time"
)

// WrapperCore contains the core logic for the AWS CLI wrapper function
type WrapperCore struct {
	// CredentialCheckTimeout is the timeout for credential validation
	CredentialCheckTimeout time.Duration
	// RefreshTimeout is the timeout for credential refresh
	RefreshTimeout time.Duration
	// SuppressOutput controls whether to suppress output during credential checks
	SuppressOutput bool
}

// NewWrapperCore creates a new WrapperCore with default settings
func NewWrapperCore() *WrapperCore {
	return &WrapperCore{
		CredentialCheckTimeout: 10 * time.Second,
		RefreshTimeout:         30 * time.Second,
		SuppressOutput:         true,
	}
}

// CheckCredentials verifies if AWS credentials are valid using aws sts get-caller-identity
// Returns true if credentials are valid, false otherwise
func (w *WrapperCore) CheckCredentials() bool {
	ctx, cancel := context.WithTimeout(context.Background(), w.CredentialCheckTimeout)
	defer cancel()

	cmd := exec.CommandContext(ctx, "aws", "sts", "get-caller-identity")

	if w.SuppressOutput {
		cmd.Stdout = nil
		cmd.Stderr = nil
	}

	err := cmd.Run()
	return err == nil
}

// RefreshCredentials attempts to refresh AWS credentials using awsm refresh
// Returns an error if refresh fails
func (w *WrapperCore) RefreshCredentials() error {
	ctx, cancel := context.WithTimeout(context.Background(), w.RefreshTimeout)
	defer cancel()

	cmd := exec.CommandContext(ctx, "awsm", "refresh")

	// Capture output for error reporting
	output, err := cmd.CombinedOutput()
	if err != nil {
		if ctx.Err() == context.DeadlineExceeded {
			return fmt.Errorf("credential refresh timed out after %v", w.RefreshTimeout)
		}

		// Include command output in error for better debugging
		outputStr := strings.TrimSpace(string(output))
		if outputStr != "" {
			return fmt.Errorf("failed to refresh credentials: %w\nOutput: %s", err, outputStr)
		}
		return fmt.Errorf("failed to refresh credentials: %w", err)
	}

	return nil
}

// ExecuteAWSCommand executes the original AWS CLI command with all provided arguments
// Returns the exit code of the AWS CLI command
func (w *WrapperCore) ExecuteAWSCommand(args []string) int {
	// Use the original aws command (not the wrapper function)
	cmd := exec.Command("aws", args...)

	// Pass through stdin, stdout, stderr for transparent operation
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	err := cmd.Run()
	if err != nil {
		// Extract exit code from error
		if exitError, ok := err.(*exec.ExitError); ok {
			return exitError.ExitCode()
		}
		// If we can't get the exit code, return 1 (general error)
		return 1
	}

	return 0
}

// WrapperLogic implements the complete wrapper logic flow
// This is the core logic that should be embedded in shell-specific wrapper functions
func (w *WrapperCore) WrapperLogic(args []string) int {
	// Step 1: Check if credentials are valid
	if !w.CheckCredentials() {
		// Step 2: Inform user about credential refresh
		fmt.Fprintln(os.Stderr, "AWS credentials expired or invalid. Refreshing...")

		// Step 3: Attempt to refresh credentials
		if err := w.RefreshCredentials(); err != nil {
			// Step 4: Handle refresh failure with helpful error message
			fmt.Fprintf(os.Stderr, "Failed to refresh AWS credentials: %v\n", err)
			fmt.Fprintln(os.Stderr, "Please check your awsm configuration and try again.")
			fmt.Fprintln(os.Stderr, "You can run 'awsm profile current' to check your current profile.")
			return 1
		}

		// Step 5: Confirm successful refresh
		fmt.Fprintln(os.Stderr, "Credentials refreshed successfully.")
	}

	// Step 6: Execute the original AWS CLI command transparently
	return w.ExecuteAWSCommand(args)
}

// GenerateShellWrapperFunction generates the wrapper function code for different shells
// This provides a consistent interface for generating shell-specific wrapper functions
func (w *WrapperCore) GenerateShellWrapperFunction(shell SupportedShell) (string, error) {
	switch shell {
	case ShellZsh:
		return w.generateZshWrapper(), nil
	case ShellBash:
		return w.generateBashWrapper(), nil
	case ShellFish:
		return w.generateFishWrapper(), nil
	case ShellPowerShell:
		return w.generatePowerShellWrapper(), nil
	default:
		return "", fmt.Errorf("unsupported shell: %s", shell)
	}
}

// generateZshWrapper generates the Zsh-compatible wrapper function
func (w *WrapperCore) generateZshWrapper() string {
	return `#compdef aws
# AWS CLI wrapper function with automatic credential refresh
# Generated by awsm wrapper command

aws() {
    # Check if credentials are valid by calling aws sts get-caller-identity
    if ! command aws sts get-caller-identity >/dev/null 2>&1; then
        echo "AWS credentials expired or invalid. Refreshing..." >&2
        
        # Attempt to refresh credentials using awsm with timeout
        if ! timeout 30 awsm refresh; then
            echo "Failed to refresh AWS credentials: refresh operation failed or timed out" >&2
            echo "Please check your awsm configuration and try again." >&2
            echo "You can run 'awsm profile current' to check your current profile." >&2
            return 1
        fi
        
        echo "Credentials refreshed successfully." >&2
    fi
    
    # Execute the original AWS CLI command with all arguments
    command aws "$@"
}
`
}

// generateBashWrapper generates the Bash-compatible wrapper function
func (w *WrapperCore) generateBashWrapper() string {
	return `# AWS CLI wrapper function with automatic credential refresh
# Generated by awsm wrapper command

aws() {
    # Check if credentials are valid by calling aws sts get-caller-identity
    if ! command aws sts get-caller-identity >/dev/null 2>&1; then
        echo "AWS credentials expired or invalid. Refreshing..." >&2
        
        # Attempt to refresh credentials using awsm with timeout
        if ! timeout 30 awsm refresh; then
            echo "Failed to refresh AWS credentials: refresh operation failed or timed out" >&2
            echo "Please check your awsm configuration and try again." >&2
            echo "You can run 'awsm profile current' to check your current profile." >&2
            return 1
        fi
        
        echo "Credentials refreshed successfully." >&2
    fi
    
    # Execute the original AWS CLI command with all arguments
    command aws "$@"
}
`
}

// generateFishWrapper generates the Fish-compatible wrapper function
func (w *WrapperCore) generateFishWrapper() string {
	return `# AWS CLI wrapper function with automatic credential refresh
# Generated by awsm wrapper command

function aws --description "AWS CLI wrapper with automatic credential refresh"
    # Check if credentials are valid by calling aws sts get-caller-identity
    if not command aws sts get-caller-identity >/dev/null 2>&1
        echo "AWS credentials expired or invalid. Refreshing..." >&2
        
        # Attempt to refresh credentials using awsm with timeout
        if not timeout 30 awsm refresh
            echo "Failed to refresh AWS credentials: refresh operation failed or timed out" >&2
            echo "Please check your awsm configuration and try again." >&2
            echo "You can run 'awsm profile current' to check your current profile." >&2
            return 1
        end
        
        echo "Credentials refreshed successfully." >&2
    end
    
    # Execute the original AWS CLI command with all arguments
    command aws $argv
end
`
}

// generatePowerShellWrapper generates the PowerShell-compatible wrapper function
func (w *WrapperCore) generatePowerShellWrapper() string {
	return `# AWS CLI wrapper function with automatic credential refresh
# Generated by awsm wrapper command

function aws {
    # Check if credentials are valid by calling aws sts get-caller-identity
    $null = aws sts get-caller-identity 2>$null
    if ($LASTEXITCODE -ne 0) {
        Write-Host "AWS credentials expired or invalid. Refreshing..." -ForegroundColor Yellow
        
        # Attempt to refresh credentials using awsm with timeout
        $job = Start-Job -ScriptBlock { awsm refresh }
        $completed = Wait-Job $job -Timeout 30
        
        if (-not $completed) {
            Stop-Job $job
            Remove-Job $job
            Write-Host "Failed to refresh AWS credentials: refresh operation timed out" -ForegroundColor Red
            Write-Host "Please check your awsm configuration and try again." -ForegroundColor Red
            Write-Host "You can run 'awsm profile current' to check your current profile." -ForegroundColor Red
            return
        }
        
        $result = Receive-Job $job
        Remove-Job $job
        
        if ($LASTEXITCODE -ne 0) {
            Write-Host "Failed to refresh AWS credentials: refresh operation failed" -ForegroundColor Red
            Write-Host "Please check your awsm configuration and try again." -ForegroundColor Red
            Write-Host "You can run 'awsm profile current' to check your current profile." -ForegroundColor Red
            return
        }
        
        Write-Host "Credentials refreshed successfully." -ForegroundColor Green
    }
    
    # Execute the original AWS CLI command with all arguments
    & (Get-Command aws -CommandType Application) @args
}
`
}

// Helper methods for testing and command construction

// buildCredentialCheckCommand returns the command used to check credential validity
func (w *WrapperCore) buildCredentialCheckCommand() []string {
	return []string{"aws", "sts", "get-caller-identity", "--output", "json"}
}

// buildRefreshCommand returns the command used to refresh credentials
func (w *WrapperCore) buildRefreshCommand() []string {
	return []string{"awsm", "refresh"}
}

// buildAWSCommand constructs the AWS CLI command with provided arguments
func (w *WrapperCore) buildAWSCommand(args []string) []string {
	cmd := make([]string, 0, len(args)+1)
	cmd = append(cmd, "aws")
	cmd = append(cmd, args...)
	return cmd
}

// getCredentialCheckTimeout returns the configured timeout for credential checks
func (w *WrapperCore) getCredentialCheckTimeout() time.Duration {
	return w.CredentialCheckTimeout
}
